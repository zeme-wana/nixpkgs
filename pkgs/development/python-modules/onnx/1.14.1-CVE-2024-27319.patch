Based on upstream 08a399ba75a805b7813ab8936b91d0e274b08287, adjusted to
apply to 1.14.1

diff --git a/onnx/common/assertions.cc b/onnx/common/assertions.cc
index a21e55da..d567c187 100644
--- a/onnx/common/assertions.cc
+++ b/onnx/common/assertions.cc
@@ -8,6 +8,8 @@
 // Adventurous users should note that the APIs will probably change.
 
 #include "onnx/common/assertions.h"
+
+#include <array>
 #include <cstdarg>
 #include <cstdio>
 #include "onnx/common/common.h"
@@ -15,16 +17,20 @@
 namespace ONNX_NAMESPACE {
 
 std::string barf(const char* fmt, ...) {
-  char msg[2048];
+  constexpr size_t buffer_size = 2048;
+  std::array<char, buffer_size> msg{};
   va_list args;
 
   va_start(args, fmt);
-  // Although vsnprintf might have vulnerability issue while using format string with overflowed length,
-  // it should be safe here to use fixed length for buffer "msg". No further checking is needed.
-  vsnprintf(msg, 2048, fmt, args);
+
+  // use fixed length for buffer "msg" to avoid buffer overflow
+  vsnprintf(static_cast<char*>(msg.data()), msg.size() - 1, fmt, args);
+
+  // ensure null-terminated string to avoid out of bounds read
+  msg.back() = '\0';
   va_end(args);
 
-  return std::string(msg);
+  return std::string(msg.data());
 }
 
 void throw_assert_error(std::string& msg) {
